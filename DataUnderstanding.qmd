---
author: "Oliver Speer"
date: "10.12.2024"
---

::::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
```{r version number, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
cat("Version:\n",format(file.info("DataUnderstanding.qmd")$mtime,"%d. %B %Y"))
```
:::
:::::

# Data Understanding {.unnumbered}

## Sammeln von Anfangsdaten {.justify}

### Protein-Elektrophorese-Daten {.justify}

Aus dem lokalen Datenserver (Phoresis / Sebia) können die Protein-Elektrophorese-Daten im csv-Format exportiert werden.

### Patientendaten {.justify}

Falls benötigt könnten über die Tagesnummer (TaNu) weitere Patientendaten, wie Geburtsdatum, Geschlecht, weitere Laborbefunde aus dem Laborinformationssystem abgerufen & hinzugefügt werden.


## Beschreiben der Daten: Qualität & Quantität {.justify}

### Protein-Elektrophorese Daten

```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("StartUp.R")
StartUpRoutine()
```

```{r read csv, echo=FALSE, message=FALSE, warning=FALSE}
# Einlesen der Daten

EPcsv <- read_csv2("epcdatawithcurve.csv", col_select = c(1:4, 6), col_types = "icccc") |> 
  rename_with(~ c("ID", "TaNu", "Bef.EP", "Bef.ImFix", "curve"))
#str(EPcsv)
```


```{r , echo=TRUE, eval=TRUE,message=FALSE, warning=FALSE}
# print(head(EPcsv, 10))
# print(glimpse(EPcsv))
ft <-  flextable(skim(EPcsv))
ft
```

**Erklärungen:**

[\$TaNu:]{.underline} Eineindeutige Tages-Nummer (TaNu) des Auftrags. Mit ihr können auch Patientendaten und weitere Resultate zugeordnet werden. Automatisch bei Auftragserfassung vergeben, sind immer vorhanden. <br> Fehlende Daten: `r sum(is.na(EPcsv$TaNu))`

[\$Bef.EP:]{.underline} String-Daten, Befundtext / Interpretation die von Labormitarbeitenden zu den Chromatogrammen erstellt wurden. Diese Text enthalten wiederkehrende Formulierungen wie z. Bsp. "unauffällig", "unauffällige Charakterisitik", oder auch "M-Protein nachweisbar", "Fraktion erhöht", "Fraktion vermindert". <br> Fehlende Daten: `r sum(is.na(EPcsv$Bef.EP))` 

[\$Bef.ImFix:]{.underline} Befundtext / Interpretation die von Labormitareitern zu den Immunfixationen (falls vorhanden) erstellt wurden. Auch hier werden ähnliche Formulierungen verwendet wie bei der EP-Befundung. <br> Fehlende Daten: `r sum(is.na(EPcsv$Bef.ImFix))`

[\$curve:]{.underline} Sebia speichert die Protein-Elektrophorese-Daten im hexadecimalen Format [@ChenWebpara2022]. <br>  Je String 1200 Stellen, also 300 Hexadezimalwerte. Nach Konversion ins Dezimal-System sind das also 300 Datenpunkte pro Chromatogramm. 

```{r, echo=FALSE, message=FALSE, warning=FALSE}
hex.string <- EPcsv$curve[EPcsv$ID == 1691]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
decimal.values <- as.data.frame(decimal.values)
decimal.values$hex.parts <- hex.parts
decimal.values$ID <- seq_len( nrow(decimal.values) ) |> rev()

# delete rows with decimal values >10000
decimal.values <- decimal.values[decimal.values$decimal.values < 10000,]

plot(decimal.values ~ ID, data = decimal.values, type = "p", pch = 20, col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "protein electrophoresis chromatogram")
```
<br> Fehlende Daten:  `r sum(is.na(EPcsv$curve))`


<!-- ### Analyse der Befundtexte {.justify} -->
<!-- Als "ground truth" für die Klassifizierung der Chromatogramme dienen die Befundtexte der Immunfixationen.    -->
<!-- Im folgenden werden all Befundtext ausgewertet. -->

<!-- ```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE} -->
<!-- #Entfernen bestimmter Strings -->
<!-- # Laden des stringr-Pakets -->
<!-- library(stringr) -->

<!-- # Definieren der zu entfernenden Phrasen -->
<!-- phrasen <- c("ohne wesentliche Veränderung", "keine wesentliche Veränderung", "ohne signifikante Veränderung", "keine signifikante Veränderung") -->

<!-- # Erstellen eines regulären Ausdrucks, der alle Phrasen abdeckt -->
<!-- pattern <- paste(phrasen, collapse = "|") -->

<!-- # Funktion zum Entfernen der Phrasen und Bereinigen der Zeichenkette -->
<!-- entferne_phrasen <- function(text) { -->
<!--   # Entfernen der definierten Phrasen -->
<!--   text <- str_remove_all(text, pattern) -->
<!--   return(text) -->
<!-- } -->

<!-- # Anwenden der Funktion auf den gesamten Vektor -->
<!-- EPcsv1$Bef.ImFix <- sapply(EPcsv$Bef.ImFix, entferne_phrasen) -->


<!-- EPcsv1 <- EPcsv1 |>  -->
<!--   mutate( -->
<!--     suspicious.iFix = case_when( -->
<!--       is.na(Bef.ImFix) ~ NA,  # Falls Bef.ImFix NA ist, wird suspicious NA -->
<!--       grepl("M-Protein\\w|\\b(mono)?klonal(e|es|er|en)?\\b|Bande|Zonierung|Zonen|M-Protein|Para\\w|Inhomogen\\w|Unregelmässig\\w", Bef.ImFix, ignore.case = TRUE) ~ 1, -->
<!--       TRUE ~ 0 -->
<!--     ), -->
<!--     neg.phrase.iFix = case_when( -->
<!--       is.na(Bef.ImFix) ~ NA,  # Falls Bef.ImFix NA ist, wird neg.phrase NA -->
<!--       grepl("nicht|kein\\w|ohne|unauffällig", Bef.ImFix, ignore.case = TRUE) ~ 1, -->
<!--       TRUE ~ 0 -->
<!--     ), -->
<!--     neg.EP = case_when( -->
<!--       is.na(Bef.EP) ~ NA,  # Falls Bef.EP NA ist, wird EP.neg NA -->
<!--       grepl("unauffällig", Bef.EP, ignore.case = TRUE) ~ 1, -->
<!--       TRUE ~ 0 -->
<!--     ) -->
<!--   ) -->

<!-- # summarise the 0 and 1 of suspicious and neg.phrase and EP.neg -->

<!-- ft <- EPcsv1  |>  -->
<!--   pivot_longer(cols = c(suspicious.iFix, neg.phrase.iFix, neg.EP), names_to = "Variable", values_to = "Wert")  |>  -->
<!--   filter(!is.na(Wert))  |>   # Entfernen von NA-Werten -->
<!--   group_by(Variable, Wert)  |>  -->
<!--   count()  |>  -->
<!--   pivot_wider(names_from = Wert, values_from = n, values_fill = 0) %>% -->
<!--   rename(Anzahl_0 = `0`, Anzahl_1 = `1`) -->
<!-- ft |> -->
<!--   flextable() -->



<!-- ``` -->



### Patientendaten


```{r, echo=TRUE, message=FALSE, warning=FALSE}
query <- "SELECT *
            FROM MeasurementData
            WHERE Tagesnummer IN ('2019.01.01.4339',
                                  '2019.01.02.0007', 
                                  '2019.01.02.5266');"
                     
                    
    pat.data <- dbGetQuery(con, query)
    
# print(glimpse(pat.data))
library(skimr)
ft <- flextable(skim(pat.data))
ft
```

Da alle involvierten Prozesse der Datengeneration und der Datensammlung automatisiert und damit standardisiert sind, sind die Daten qualitativ hochwertig. Die Quantität der Daten mit `r nrow(EPcsv)` Datensätzen ist für einige unsupervised und auch supervised Model-Ansätze ausreichend, für Ansätze mit z. Bsp Tensor Flow sind es evtl. zu wenig Datensätze. 

## Untersuchen der Daten: Explorative Datenanalyse {.justify}

### String Daten in den Befunden
#### EP Befunde

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(stringr)
m.grad.count <- str_count(EPcsv$Bef.EP, regex("gradient", ignore_case = TRUE))
m.prot.count <- str_count(EPcsv$Bef.EP, regex("M-Protein", ignore_case = TRUE))
m.komp.count <- str_count(EPcsv$Bef.EP, regex("m-komponent", ignore_case = TRUE))
normal.count <- str_count(EPcsv$Bef.EP, regex("unauffällig", ignore_case = TRUE))
entf.count <- str_count(EPcsv$Bef.EP, regex("entfernt", ignore_case = TRUE))

```
In den Befundtexten kommt insgesamt das Wort <br>
"unauffällig" `r sum(normal.count)` mal vor. Das Wort<br>
"M-Protein" kommt `r sum(m.prot.count)`,<br>
"M-Komponente" `r sum(m.komp.count)`,<br>
"M-Gradient" `r sum(m.grad.count)` mal vor.


Auf den ersten Blick scheinen in den Daten `r sum(normal.count)` unauffällige Befunde vorzukommen,
bei insgesamt `r nrow(EPcsv)-sum(entf.count)` befundeten Chromatogrammen.

#### Immunfixation Befunde
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(stringr)

# Definieren der zu entfernenden Phrasen
phrasen <- c("ohne wesentliche Veränderung", "keine wesentliche Veränderung", "ohne signifikante Veränderung", "keine signifikante Veränderung", "Hinweis: Bitte markieren Sie die Analyse Immunfixation auf dem Auftragsformular  nicht", "Keine Veränderung zum Vorbefund.", "keine wesentlichen Veränderungen", "Keine wesentlichen Veränderungen", "keine Veränderung gegenüber dem", "Keine wesentliche Veränderung", "Keine Veränderung im Vergleich zum", "Keine signifikante Veränderung", "keine Veränderungen zum", "Keine signifikanten Unterschiede", "keine wesentlichen Änderungen", "Keine wesentlichen Änderungen", "Keine signifikant Veränderung", "keine signifikante Änderung", "Keine wesentliche Änderungen", "Keine wesenstliche Veränderung", "Keine Veränderungen zum", "Befund ohne wesentliche qualitative Veränderung", "Keine wesentliche Änderung", "keine wesentliche Änderung", "Keine signifikanten Veränderungen", "keine signifikanten Veränderungen", "ohne Veränderung")

# Erstellen eines regulären Ausdrucks, der alle Phrasen abdeckt
pattern <- paste(phrasen, collapse = "|")

# Funktion zum Entfernen der Phrasen und Bereinigen der Zeichenkette
entferne_phrasen <- function(text) {
  # Entfernen der definierten Phrasen
  text <- str_remove_all(text, pattern)
  return(text)
}

# Anwenden der Funktion auf den gesamten Vektor
EPcsv1 <- EPcsv |> 
  mutate(Bef.ImFix = sapply(Bef.ImFix, entferne_phrasen))

# EPcsv1$Bef.ImFix <- sapply(EPcsv$Bef.ImFix, entferne_phrasen)


EPcsv1 <- EPcsv1 |>
  mutate(
    suspicious.iFix = case_when(
      is.na(Bef.ImFix) ~ NA,  # Falls Bef.ImFix NA ist, wird suspicious NA
      grepl("M-Protein\\w|\\b(mono)?klonal(e|es|er|en)?\\b|Bande|Zonierung|Zonen|M-Protein|Para\\w|Inhomogen\\w|Unregelmässig\\w", Bef.ImFix, ignore.case = TRUE) ~ 1,
      TRUE ~ 0
    ),
    neg.phrase.iFix = case_when(
      is.na(Bef.ImFix) ~ NA,  # Falls Bef.ImFix NA ist, wird neg.phrase NA
      grepl("nicht|kein\\w|ohne", Bef.ImFix, ignore.case = TRUE) ~ 1,
      TRUE ~ 0
    ),
    neg.EP = case_when(
      is.na(Bef.EP) ~ NA,  # Falls Bef.EP NA ist, wird EP.neg NA
      grepl("unauffällig", Bef.EP, ignore.case = TRUE) ~ 1,
      TRUE ~ 0
    )
  )


string.analys <- EPcsv1 |> 
  summarise(
    poitive.iFix = sum(suspicious.iFix == 1 & neg.phrase.iFix == 0, na.rm = TRUE),
    neg.phrase.iFix = sum(suspicious.iFix == 1 & neg.phrase.iFix == 1 | suspicious.iFix == 0 & neg.phrase.iFix == 0, na.rm = TRUE),
    neg.EP = sum(neg.EP == 1, na.rm = TRUE),
    neg.EP.pos.iFix = sum(neg.EP == 1 & suspicious.iFix == 1, na.rm = TRUE),
    other = sum(suspicious.iFix == 0 & neg.phrase.iFix == 1, na.rm = TRUE)
  )

EPcsv.red <- EPcsv1 |> 
  filter(neg.EP == 1 & suspicious.iFix == 1) |> 
  select(ID, Bef.EP, Bef.ImFix, suspicious.iFix, neg.phrase.iFix, neg.EP)

positive.iFix.count <- EPcsv1 |> 
  filter(suspicious.iFix == 1 & neg.phrase.iFix == 0) |> 
  nrow()

negative.iFix.count <- EPcsv1 |> 
  filter(suspicious.iFix == 1 & neg.phrase.iFix == 1 | suspicious.iFix == 0 & neg.phrase.iFix == 0 ) |> 
  nrow() 

other.count <- EPcsv1 |> 
  filter(suspicious.iFix == 0 & neg.phrase.iFix == 1 ) |> 
  nrow() 

neg.EP.count <- EPcsv1 |> 
  filter(neg.EP == 1) |> 
  nrow()

neg.EP.pos.iFix <- EPcsv1 |> 
  filter(neg.EP == 1 & suspicious.iFix == 1) |> 
  nrow()
 
```

```{r , echo=TRUE, eval=TRUE,message=FALSE, warning=FALSE}
# print(head(EPcsv, 10))
# print(glimpse(EPcsv))
ft <-  flextable(skim(EPcsv1))
ft
```

[Insgesamt sind `r sum(nrow(na.omit(EPcsv1)))` Immunfixationen befundet worden. Davon sind `r negative.iFix.count` als negativ (unauffällig, oder M-Protein nicht mehr nachweisbar) befundet worden. In `r positive.iFix.count` Fällen wurde ein M-Protein oder eine Zonierung gefunden. `r other.count` Immunfixationen wurden als nicht eindeutig beurteilt.]{style="color:#00008B;font-weight:bold"}

### Chromatogramm Daten

```{r, echo=FALSE, message=FALSE, warning=FALSE}
hex.string <- EPcsv$curve[EPcsv$ID == 1691]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
decimal.values <- as.data.frame(decimal.values)
decimal.values$hex.parts <- hex.parts
decimal.values$ID <- seq_len( nrow(decimal.values) ) |> rev()

# delete rows with decimal values >10000
decimal.values <- decimal.values[decimal.values$decimal.values < 10000,]

plot(decimal.values ~ ID, data = decimal.values, type = "p", pch = 20, col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "protein electrophoresis chromatogram")
```


## Überprüfen der Datenqualität {.justify}

Die Datenqualität ist gut. Die Datensätze sind alle einheitlich, da automatisiert aufgezeichnet. 
Von den `r as.integer(nrow(EPcsv))` Datensätze fehlen bei `r as.integer(sum(is.na(EPcsv$curve)))` die Chromatographie-Daten. Diese könnten bei der Datenpreparation ausgeschlossen werden.  

Die Chromatographie Daten wurden bis `r as.Date(substr(max(EPcsv$TaNu), 1, 10), format = "%Y.%m.%d")` im vorliegenden Datensatz gespeichert. Die Daten von `r as.Date(substr(max(EPcsv$TaNu), 1, 10), format = "%Y.%m.%d")` bis `r Sys.Date()` könnten noch hinzugefügt werden.

