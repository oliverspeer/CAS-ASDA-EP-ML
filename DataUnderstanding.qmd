---
author: "Oliver Speer"
date: "10.12.2024"
---

::::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
```{r version number, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
cat("Version:\n",format(file.info("DataUnderstanding.qmd")$mtime,"%d. %B %Y"))
```
:::
:::::

# Data Understanding {.unnumbered}

## Sammeln von Anfangsdaten {.justify}

### Protein-Elektrophorese-Daten {.justify}

Aus dem localen Datenserver (Phoresis / Sebia) können die Protein-Elektrophorese-Daten im csv-Format exportiert werden.

### Patientendaten {.justify}

Falls benötigt könnten über die Tagesnummer (TaNu) weitere Patientendaten aus dem Laborinformationssystem abgerufen & hinzugefügt werden.

```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("StartUp.R")
StartUpRoutine()
```

```{r, echo=TRUE, message=FALSE, warning=FALSE}
query <- "SELECT *
            FROM MeasurementData
            WHERE Tagesnummer IN ('2019.01.01.4339',
                                  '2019.01.02.0007', 
                                  '2019.01.02.5266');"
                     
                    
    pat.data <- dbGetQuery(con, query)
    head(pat.data)
```

## Beschreiben der Daten: Qualität & Quantität {.justify}

### Protein-Elektrophorese Daten

```{r echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
```

```{r read csv, echo=FALSE, message=FALSE, warning=FALSE}
# Einlesen der Daten

EPcsv <- read_csv("epcdatawithcurve.csv", col_select = c(1:4, 6), col_types = "icccc")
#str(EPcsv)
head(EPcsv)
```

**Erklärungen:**

[\$tanu:]{.underline} Eineindeutige Tages-Nummer (TaNu) des Auftrags. Mit ihr können auch Patientendaten und weitere Resultate zugeordnet werden. Automatisch bei Auftragserfassung vergeben, sind immer vorhanden. <br> Fehlende Daten: `r sum(is.na(EPcsv$tanu))`

[\$befep:]{.underline} String-Daten, Befundtext / Interpretation die von Labormitarbeitenden zu den Chromatogrammen erstellt wurden. Diese Text enthalten wiederkehrende Formulierungen wie z. Bsp. "unauffällig", "unauffällige Charakterisitik", oder auch "M-Protein nachweisbar", "Fraktion erhöht", "Fraktion vermindert". <br> Fehlende Daten: `r sum(is.na(EPcsv$befep))` 

[\$befimfix:]{.underline} Befundtext / Interpretation die von Labormitareitern zu den Immunfixationen (falls vorhanden) erstellt wurden. Auch hier werden ähnliche Formulierungen verwendet wie bei der EP-Befundung. <br> Fehlende Daten: `r sum(is.na(EPcsv$befimfix))`

[\$curve:]{.underline} Sebia speichert die Protein-Elektrophorese-Daten im hexadecimalen Format [@ChenWebpara2022]. <br>  Je String 1200 Stellen, also 300 Hexadezimalwerte. Nach Konversion sind das als 300 Datenpunkte pro Chromatogramm. 

```{r, echo=FALSE, message=FALSE, warning=FALSE}
hex.string <- EPcsv$curve[28276]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
decimal.values <- as.data.frame(decimal.values)
decimal.values$hex.parts <- hex.parts
decimal.values$ID <- 1:nrow(decimal.values)

# delete rows with decimal values >10000
decimal.values <- decimal.values[decimal.values$decimal.values < 10000,]

plot(decimal.values ~ ID, data = decimal.values, type = "p", pch = 20, col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "protein electrophoresis chromatogram")
```
<br> Fehlende Daten:  `r sum(is.na(EPcsv$curve))`


## Untersuchen der Daten: Explorative Datenanalyse {.justify}

text & code

## Überprüfen der Datenqualität {.justify}
