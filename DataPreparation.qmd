---
author: "Oliver Speer"
date: "10.12.2024"
---

::::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
```{r version number, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
cat("Version:\n",format(file.info("DataPreparation.qmd")$mtime,"%d. %B %Y"))
```
:::
:::::

```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("StartUp.R")
StartUpRoutine()
```

# Data Preparation {.unnumbered}


## Auswahl der Daten: Auswahl der relevanten Elemente und Merkmale {#var_selection .justify}




```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
library(dagitty)
dag <- dagitty('dag {
  age -> gammopathy
  food -> cholesterol
  cholesterol -> gammopathy
  smoking -> gammopathy
  alcohol -> liver_enzyme
  alcohol -> cholesterol
  gammopathy <- liver_enzyme
  sex -> gammopathy
  GUS -> gammopathy
  age -> GUS
  sex -> liver_enzyme
  sex -> smoking
  sex -> alcohol
  sex -> cholesterol
  sex -> GUS
  sex -> age
  age -> liver_enzyme
  age -> food
  age -> smoking
  age -> alcohol
  
}')

plot(dag)

adjustmentSets(dag, exposure = "sex", outcome = "gammopathy")
adjustmentSets(dag, exposure = "age", outcome = "gammopathy")
```
Sollte ich ein gam oder glm modellieren, dann kann ich aus dem oberen DAG mitnehmen, dass ich f체r "Alter" und "Geschlecht" adjustieren sollte.

[**Q: Aber wie w채hle ich f체r ein random forest Modell die relevanten Variablen aus?**]{style="#00008B"}



## Bereinigen der Daten {.justify}

## Erstellen neuer Daten {.justify}
```{r read csv, echo=T, message=FALSE, warning=FALSE}
# Einlesen der Daten

EPcsv <- read_csv2("epcdatawithcurve.csv", col_select = c(1:4, 6), col_types = "icccc") |> 
  rename_with(~ c("ID", "TaNu", "Bef.EP", "Bef.ImFix", "curve"))
#str(EPcsv)
```
### peak detection
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}

library(pracma)



hex.string <- EPcsv$curve[EPcsv$ID == 1690]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
decimal.values <- as.data.frame(decimal.values)
decimal.values$hex.parts <- hex.parts
decimal.values$ID <- 1:nrow(decimal.values)

# delete rows with decimal values >10000
decimal.values <- decimal.values[decimal.values$decimal.values < 10000,]

peaks <- findpeaks(decimal.values$decimal.values, npeaks = 15, nups = 1, ndowns = 0, minpeakheight = 80)


plot(decimal.values ~ ID, data = decimal.values, type = "l", col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "EP Chromatogramm mit detektierten Peaks")
points(decimal.values$ID[peaks[,2]], peaks[,1], col = "red", pch = 20)

``` 


### peak detection
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}

library(pracma)



hex.string <- EPcsv$curve[EPcsv$ID == 1671]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
decimal.values <- as.data.frame(decimal.values)
decimal.values$hex.parts <- hex.parts
decimal.values$ID <- 1:nrow(decimal.values)

# delete rows with decimal values >10000
decimal.values <- decimal.values[decimal.values$decimal.values < 10000,]

peaks <- findpeaks(decimal.values$decimal.values, npeaks = 15, nups = 1, ndowns = 0, minpeakheight = 80)


plot(decimal.values ~ ID, data = decimal.values, type = "l", col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "normales EP Chromatogramm mit detektierten Peaks")
points(decimal.values$ID[peaks[,2]], peaks[,1], col = "red", pch = 20)

``` 

### Steigungen vor den Peaks
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the slopes before and after the peaks
slopes <- numeric(0)
for (i in 1:nrow(peaks)) {
      slopes <- c(slopes, (decimal.values$decimal.values[peaks[i,2]-2] - decimal.values$decimal.values[peaks[i,2] - 5]) / ((peaks[i,2]-2) - (peaks[i,2] - 5)))
 }

slopes


```

### zweite Ableitung vor den Peaks 
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the second derivative at the peaks

sp.der <- predict(smooth.spline(decimal.values$ID, decimal.values$decimal.values), deriv = 2)$y[peaks[,2]-0]
sp.der
```

### Integration der Fl채che unter den Peaks (AUC)
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the area under the curve
```



## Integrieren von Daten {.justify}

## Formatieren von Daten {.justify}
