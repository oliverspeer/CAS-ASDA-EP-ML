---
author: "Oliver Speer"
date: "10.12.2024"
---

::::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
```{r version number, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
cat("Version:\n",format(file.info("DataPreparation.qmd")$mtime,"%d. %B %Y"))
```
:::
:::::

```{r, echo=FALSE, message=FALSE, warning=FALSE}
source("StartUp.R")
StartUpRoutine()
```

# Data Preparation {.unnumbered}


## Auswahl der Daten: Auswahl der relevanten Elemente und Merkmale {#var_selection .justify}




```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
library(dagitty)
dag <- dagitty('dag {
  age -> gammopathy
  food -> cholesterol
  cholesterol -> gammopathy
  smoking -> gammopathy
  alcohol -> liver_enzyme
  alcohol -> cholesterol
  gammopathy <- liver_enzyme
  sex -> gammopathy
  GUS -> gammopathy
  age -> GUS
  sex -> liver_enzyme
  sex -> smoking
  sex -> alcohol
  sex -> cholesterol
  sex -> GUS
  sex -> age
  age -> liver_enzyme
  age -> food
  age -> smoking
  age -> alcohol
  
}')

plot(dag)

adjustmentSets(dag, exposure = "sex", outcome = "gammopathy")
adjustmentSets(dag, exposure = "age", outcome = "gammopathy")
```
Sollte ich ein gam oder glm modellieren, dann kann ich aus dem oberen DAG mitnehmen, dass ich für "Alter" und "Geschlecht" adjustieren sollte.

[**Q: Aber wie wähle ich für ein random forest Modell die relevanten Variablen aus?**]{style="#00008B"}



## Bereinigen der Daten {.justify}
```{r read csv, echo=T, message=FALSE, warning=FALSE}
# Einlesen der Daten

EPcsv <- read_csv2("epcdatawithcurve.csv", col_select = c(1:4, 6), col_types = "icccc") |> 
  rename_with(~ c("ID", "TaNu", "Bef.EP", "Bef.ImFix", "curve"))
#str(EPcsv)
```
Datensätze ohne Chromatogramm-Daten werden entfernt.
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# filtern der Daten EPcsv1$curve !NA
EPcsv1 <- EPcsv[!is.na(EPcsv$curve),]
```

## Erstellen neuer Daten {.justify}

### Auswertung der Befundtexte {.justify}
Als "ground truth" für die Auswertung der Chromatogramme dienen die Befundtexte der Immunfixationen. Diese Befundtext werden im folgenden ausgewertet.
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
EPcsv1 <- EPcsv1 |> 
  mutate(
    suspicious = case_when(
      is.na(Bef.ImFix) ~ NA,  # Falls Bef.ImFix NA ist, wird suspicious NA
      grepl("M-Protein\\w|\\b(mono)?klonal(e|es|er|en)?\\b|Bande|Zonierung|Zonen|M-Protein|Para\\w|Inhomogen\\w|Unregelmässig\\w", Bef.ImFix, ignore.case = TRUE) ~ 1,
      TRUE ~ 0
    ),
    neg.phrase = case_when(
      is.na(Bef.ImFix) ~ NA,  # Falls Bef.ImFix NA ist, wird neg.phrase NA
      grepl("nicht|kein\\w|ohne", Bef.ImFix, ignore.case = TRUE) ~ 1,
      TRUE ~ 0
    )
  )
```

### peak detection im pathologischen Chromatogramm
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}

library(pracma)



hex.string <- EPcsv1$curve[EPcsv1$ID == 1690]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
dat <- as.data.frame(decimal.values)
dat$decimal.values <- rev(dat$decimal.values)
dat$hex.parts <- hex.parts
dat$ID <- seq_len( nrow(dat) ) 

# delete rows with decimal values >10000
dat <- dat[dat$decimal.values < 10000,]

peaks <- findpeaks(dat$decimal.values, npeaks = 15, nups = 1, ndowns = 0, minpeakheight = 80)


plot(decimal.values ~ ID, data = dat, type = "l", col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "EP Chromatogramm mit detektierten Peaks")
points(dat$ID[peaks[,2]], peaks[,1], col = "red", pch = 20)
abline(v = dat$ID[peaks[, 3]], col = "blue", lty = 2)  # Start of peaks
abline(v = dat$ID[peaks[, 4]], col = "blue", lty = 2)  # End of peaks
abline(v = dat$ID[160], col = "orange", lty = 2)
text(x = dat$ID[peaks[, 2]], y = peaks[, 1]+c(-500, 1, 200, 200, 1, 1 ), labels = c("Albumin", "alpha 1", "alpha 2", "beta 1", "beta 2", "gamma"),
     pos = c(2, 3, 3, 3, 3, 3), offset = 0.5  , col = "darkgreen")





``` 
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the area under the curve for all peaks

auc_all_peaks <- apply(peaks, 1, function(peak) {
  start_index <- peak[3]  # Start index
  end_index <- peak[4]    # End index
  peak_time <- decimal.values$ID[start_index:end_index]
  peak_signal <- decimal.values$decimal.values[start_index:end_index]
  trapz(peak_time, peak_signal)  # Trapezoidal rule for AUC
})

auc_all_peaks

```

### peak detection im normalen Chromatogramm
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}

library(pracma)



hex.string <- EPcsv1$curve[EPcsv1$ID == 1671]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
decimal.values <- as.data.frame(decimal.values)
decimal.values$hex.parts <- hex.parts
decimal.values$ID <- seq_len( nrow(decimal.values) ) |> rev()

# delete rows with decimal values >10000
decimal.values <- decimal.values[decimal.values$decimal.values < 10000,]

peaks <- findpeaks(decimal.values$decimal.values, npeaks = 15, nups = 1, ndowns = 0, minpeakheight = 80)


plot(decimal.values ~ ID, data = decimal.values, type = "l", col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = "normales EP Chromatogramm mit detektierten Peaks")
points(decimal.values$ID[peaks[,2]], peaks[,1], col = "red", pch = 20)
abline(v = decimal.values$ID[peaks[, 3]], col = "blue", lty = 2)  # Start of peaks
abline(v = decimal.values$ID[peaks[, 4]], col = "blue", lty = 2)  # End of peaks
``` 
### Area Under the Curve (AUC)

Die wichtigen Peaks für die Beurteilung einer Gammopathie sind die Peaks beta1, beta2, und gamma. Für diesen Bereicht des Chromatogramms werden im folgenden die Flächen zwischen den jeweils benachbarten Messpunkten berechnet.

```{r, message=FALSE, warning=FALSE}
# Filtern des Datensatzes für den gewünschten ID-Bereich
dat_filtered <- subset(dat, ID >= 160)

# Filtern der Peaks entsprechend dem gefilterten Datensatz
peaks_filtered <- peaks[peaks[, 2] >= 160, ]

# Erstellen des Plots mit dem gefilterten Datensatz
plot(decimal.values ~ ID, data = dat_filtered, type = "l", col = "blue", lwd = 2,
     xlab = "ID", ylab = "Signal", main = "EP Chromatogramm mit detektierten Peaks (ID 160-300)")

# Hinzufügen der Peak-Punkte
points(dat_filtered$ID[peaks_filtered[, 2] - 156], peaks_filtered[, 1], col = "red", pch = 20)

# Hinzufügen der vertikalen Linien für Peak-Start und -Ende
abline(v = dat_filtered$ID[peaks_filtered[, 3] - 156], col = "blue", lty = 2)  # Start der Peaks
abline(v = dat_filtered$ID[peaks_filtered[, 4] - 156], col = "blue", lty = 2)  # Ende der Peaks

# Hinzufügen der vertikalen Linie bei ID 160
abline(v = dat_filtered$ID[1], col = "orange", lty = 2)

# Hinzufügen der Beschriftungen mit spezifischen Offsets
text(x = dat_filtered$ID[peaks_filtered[, 2] - 159], 
     y = peaks_filtered[, 1],
     labels = c(#"Albumin", "alpha 1", "alpha 2", 
                "beta 1", 
                "beta 2", 
                "gamma"),
     pos = c(#2, 3, 3, 
             3, 3, 4), offset = 1, col = "darkgreen")

# Hinzufügen eines schattierten Bereichs zwischen ID 239 und 240
polygon(c(dat_filtered$ID[83:84], rev(dat_filtered$ID[83:84])),
        c(dat_filtered$decimal.values[83:84], rep(0, length(dat_filtered$decimal.values[83:84]))),
        col = "gray", border = NA)


```
Die grau eingefärbte Beispielfläche oben hat eine Fläche von:  


`r trapz(dat_filtered$ID[83:84], dat_filtered$decimal.values[83:84])`

Somit werden pro Chromatogramm 139 Flächen (AUCs) als features berechnet.

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the area under the curve for a section
dat$AUC <- rep(NA, nrow(dat))
for (i in 1:(nrow(dat))){
      dat$AUC[i] <- trapz(dat$ID[i:(i+1)], dat$decimal.values[i:(i+1)])
}
dat$AUC[is.na(dat$AUC)] <- 0
```


### Steigungen vor den Peaks
Adäquat wird zwischen diesen Punktepaaren auch die Steigung berechnet
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the slopes between the points 160 to 300
dat$slopes <- rep(0, nrow(dat))
for (i in 1:(nrow(dat))) {
      dat$slopes[i] <- (dat$decimal.values[i+1] - dat$decimal.values[i]) / ((dat$ID[i+1]) - (dat$ID[i]))
 }
dat$slopes[is.na(dat$slopes)] <- 0




```

### zweite Ableitung vor den Peaks 
```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
# calculate the second derivatives 

dat$der <- rep(NA, nrow(dat))
dat$der <- predict(smooth.spline(dat$ID, dat$decimal.values), deriv = 2)$y[1:(nrow(dat))]


```

```{r}


```



## Integrieren von Daten {.justify}

## Formatieren von Daten {.justify}
