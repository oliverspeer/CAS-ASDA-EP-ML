---
author: "Oliver Speer"
date: "10.06.2024"
---

::::: columns
::: {.column width="50%"}
![ ](zlm.jpeg){width=40%}
:::

::: {.column width="50%"}
```{r version number, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
cat("Version:\n",format(file.info("BusinessUnderstanding.qmd")$mtime,"%d. %B %Y"))
```
:::
:::::

# Business Understanding {.unnumbered}

## Geschäftlicher Hintergrund {.justify}

Das Zentrum für Labormedizin (ZLM) ist der öffentliche & zentrale Versorger von labormedizinischen Dienstleistungen im Kanton St Gallen. Das ZLM beschäftigt ca 240 Mitarbeitende in den fünf klassischen Fachgebieten Genetik, Hämatologie, Immunologie, Mikrobiologie und Klinische Chemie [@korteGeschaftsbericht2023].

In der Klinischen Chemie arbeiten 14 Mitarbeitende. Sie führen rund 3Mio Analysen jährlich im hochautomatisierten Core-Labor und in der handarbeits-intensiven Spezial-Chemie durch. Die Spezial-Chemie ist noch relativ wenig automatisiert, ist jedoch mit einem überdurchschnittlichem Wachstum (5-8% jährlich) konfrontiert, welches den schnellen Fortschritt in den diagnostischen und therapeutischen Möglichkeiten in der Medizin, aber auch das zunehmende Alter und somit zunehmende Komplexität der Erkrankungen in der Bevölkerung wiederspiegelt.

Mit annähernd 5000 Aufträgen jährlich stellen die Protein-Elektrophoresen (EP) (siehe @fig-epumsatz) einen wesentlicher Anteil der täglichen Routine-Arbeit in der Spezial-Chemie. Mit deren technisch operativen Durchführung der Interpretation der Resulate werden überproportional viel Arbeitszeit verwendet.

```{r, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}

# prepare libraries ---------------------------------------------------------
# Vector of libraries
packages <- c(
              "readxl", 
              "data.table", 
              "tidyverse", 
              "DBI", 
              "RSQLite",
              "scales"
              )

# Loop to check if libraries are installed and install them if not and load them
for (package in packages) {
  if (! require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}

# setting ggplot theme------------------------------------------------------
theme_set(
  theme_grey() +
  theme( text = element_text(size = 14),
         axis.title = element_text(size = 16),
         axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
         axis.text.y = element_text(size = 14))

                        )
# setup functions ------------------------------------------------------------
fun.labels <- function(values, data.range = NULL) {
  if(is.null(data.range)) {
    data.range <- range(values, na.rm = TRUE)
  }
  max.value <- max(abs(data.range))
  
  if (max.value >= 1e6) {
    return(number(values / 1e6, accuracy = 0.1, suffix = " M"))
  } else if (max.value >= 1e3) {
    return(number(values / 1e3, accuracy = 0.1, suffix = " k"))
  } else {
    return(number(values))
  }
}


# connect to database ------------------------------------------------------
# Function to detect the operating system and return the corresponding database path
getDatabasePath <- function() {
  # Detect operating system
  os <- Sys.info()["sysname"]
  
  # Set the path based on the operating system
  if (os == "Linux") {
    # Path for Ubuntu
    path <- "/home/olli/R_local/labStat/ClinicalChemistry_1.db"
  } else if (os == "Windows") {
    # Path for Windows
    path <- "C:/R_local/labStat/ClinicalChemistry_1.db"
  } else {
    stop("Operating system not supported")
  }
  
  return(path)
}

# set database directory
db.wd <- getDatabasePath()

# Connect to the database
db <- dbConnect(SQLite(), dbname = db.wd)






# Generate plot with yearly Txp & Count data per method for the selected device-------------------------------

     query <- sprintf("SELECT MeasurementData.Jahr AS Year, MeasurementData.Bezeichnung AS Analyt,
                       SUM(Txp) AS 'Txp Umsatz', 
                       COUNT(DISTINCT Tagesnummer) AS 'Anzahl Aufträge'
                  FROM MeasurementData
                  JOIN TarifData ON MeasurementData.Methode = TarifData.Methode
                  JOIN MethodData ON MeasurementData.Methode = MethodData.Methode
                  WHERE MethodData.Gerät = 'EP_IFE' 
                  AND MeasurementData.Jahr =  '2023' 
                  GROUP BY MeasurementData.Jahr, MeasurementData.Methode
                  ORDER BY MeasurementData.Jahr ASC, MeasurementData.Methode ASC")
     
     data.device.a <- dbGetQuery(db, query)
     
     # calculate 'Txp' as percentage of total
     data.device.a$'Umsatz [%]' <- data.device.a$'Txp Umsatz' / sum(data.device.a$'Txp Umsatz') * 100
     
     # calculate ranges and factors for axis scaling
     data.range <- range(data.device.a$'Txp Umsatz', na.rm = TRUE)
     scaling.factor <- max(abs(data.range))/max(data.device.a$'Anzahl Aufträge', na.rm = TRUE)
     
     
     # Plot the data
    p <-  ggplot(data.device.a, aes(x = Analyt)) +
       geom_col(aes(y = `Txp Umsatz`), fill = "red", color = "darkgreen", alpha = 0.8) +
       geom_point(aes(y = scaling.factor*`Anzahl Aufträge`, size = `Umsatz [%]`), 
                  shape = 21, 
                  fill = "lightblue", 
                  color = "navy", 
                  stroke = 0.8, 
                  alpha = 0.8
                  ) + 
       labs(x = " ", y = "Umsatz [CHF]", title = " ") +
       theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
             axis.text.y = element_text(size = 8),
             axis.title.y = element_text(size = 10))  +
       scale_y_continuous(labels = function(values) fun.labels(values, data.range), 
                          #label_number(big.mark = "'", decimal.mark = '.'),  
                          sec.axis = sec_axis(~. /scaling.factor, name = "Anzahl Aufträge"))
    
# disconnect from database
dbDisconnect(db)
```

```{r, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
#| label: fig-epumsatz
#| fig-cap: "Umsatz der verschiedenen Analysen in der Spezial-Chemie im Jahr 2023"

(p)
```

Die Protein-Elektrophoresen (EP) sind neben den Immunfixationen mit 40% des Umsatzes die wichtigste Analyse in der Spezial-Chemie.

Die technisch operative Durchführung der EPs ist mit dem Capylaris (@fig-capy) semi- automatisiert.

![**Capylaris** *Quelle: www.sebia.com*](fig2_capy.jpeg){#fig-capy}

![**Chromatogramm:** einer Serum-Protein-Elektrophorese mit den verschiedenen Peaks.](fig1_EP.png){#fig-chrom}

[@leeClinicalUseInterpretation2017]

Die Software des Capylaris speichert die Signalstärken der EPs und stellt diese als Chromatogramme dar (@fig-chrom). Die Kontrolle und Interpretation der EP-Chromatogramme wird in zwei Phasen aufgeteilt: der technischen Validation und der medizinischen Validation. Dieser Validationsprozess benötigt viel Zeit und Know-How, ist komplex und erfordert Erfahrung und Wissen. Vorallem die medizinische Validation ist zum Teil subjektiv und wird von verschiedenen Mitarbeitenden unterschiedlich durchgeführt.

```{r read csv, echo=FALSE, message=FALSE, warning=FALSE}
# Einlesen der Daten

EPcsv <- read_csv2("epcdatawithcurve.csv", col_select = c(1:4, 6), col_types = "icccc") |> 
  rename_with(~ c("ID", "TaNu", "Bef.EP", "Bef.ImFix", "curve"))
#str(EPcsv)
```

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
#| label: fig-peak-patho
#| fig-cap: Pathologisches Chromatogramm mit detektierten Peaks

library(pracma)



hex.string <- EPcsv$curve[EPcsv$ID == 1675]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
dat <- as.data.frame(decimal.values)
dat$decimal.values <- rev(dat$decimal.values)
dat$hex.parts <- hex.parts
dat$ID <- seq_len( nrow(dat) ) 

# delete rows with decimal values >10000
dat <- dat[dat$decimal.values < 10000,]

peaks <- findpeaks(dat$decimal.values, npeaks = 15, nups = 1, ndowns = 0, minpeakheight = 80)


plot(decimal.values ~ ID, data = dat, type = "l", col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = " ")
points(dat$ID[peaks[,2]], peaks[,1], col = "red", pch = 20)
abline(v = dat$ID[peaks[, 3]], col = "blue", lty = 2)  # Start of peaks
abline(v = dat$ID[peaks[, 4]], col = "blue", lty = 2)  # End of peaks
abline(v = dat$ID[160], col = "orange", lty = 2)
text(x = dat$ID[peaks[, 2]], y = peaks[, 1]+c(-500, 1, 200, 200, 1, 1 ), labels = c("Albumin", "alpha 1", "alpha 2", "beta 1", "beta 2", "gamma"),
     pos = c(2, 3, 3, 3, 3, 3), offset = 0.5  , col = "darkgreen")





``` 

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
#| label: fig-peak-poly
#| fig-cap: Auffälliges Chromatogramm mit detektierten Peaks

library(pracma)



hex.string <- EPcsv$curve[EPcsv$ID == 9075]

# Split the string into hexadecimal parts
hex.parts <- substring(hex.string, seq(1, nchar(hex.string), 4), seq(4, nchar(hex.string), 4))

# Convert each hex part to decimal
decimal.values <- sapply(hex.parts, function(x) as.integer(paste0("0x", x)))

# dataframe with hexadecimal and decimal values
dat <- as.data.frame(decimal.values)
dat$decimal.values <- rev(dat$decimal.values)
dat$hex.parts <- hex.parts
dat$ID <- seq_len( nrow(dat) ) 

# delete rows with decimal values >10000
dat <- dat[dat$decimal.values < 10000,]

peaks <- findpeaks(dat$decimal.values, npeaks = 15, nups = 1, ndowns = 0, minpeakheight = 80)


plot(decimal.values ~ ID, data = dat, type = "l", col = "blue", lwd = 2, xlab = "ID", ylab = "signal", main = " ")
points(dat$ID[peaks[,2]], peaks[,1], col = "red", pch = 20)
abline(v = dat$ID[peaks[, 3]], col = "blue", lty = 2)  # Start of peaks
abline(v = dat$ID[peaks[, 4]], col = "blue", lty = 2)  # End of peaks
abline(v = dat$ID[160], col = "orange", lty = 2)
#text(x = dat$ID[peaks[, 2]], y = peaks[, 1]+c(-500, 1, 200, 200, 1, 1 ), labels = c("Albumin", "alpha 1", "alpha 2", "beta 1", "beta 2", "gamma"),
#     pos = c(2, 3, 3, 3, 3, 3), offset = 0.5  , col = "darkgreen")





``` 

![**Immun-Fixation:** Serum-Protein-Elektrophorese und Immunfixation zum Nachweis von Paraproteinen](ifix.png){#fig-ifix}


Zudem stehen alle Mitarbeitenden unter permanentem Zeitdruck, da pro Mitarbeitenden viele Aufträge in unterschiedlichen Prozessen anfallen.

Da die Mehrheit der Chromatogramme normal (= unauffällig) sind, wäre es eine wesentliche Erleichterung, wenn ein digitales System (machine learning model) diese als solche erkennen und klassifizieren könnte.

## Geschäftsziele definieren {.justify}

**Zu klärende Fragen**

-   Kann ein supervised Model zwischen normalen und pathologischen EP-Chromatogrammen unterscheiden?

-   Wird ein solches Model genau genug sein um im Alltag tatsächlich zum Abbau der Arbeitslast beitragen zu können?

**Zu lösende Probleme**

-   Prozessoptimierung der Protein-Elektrophorese

-   Laborantinnen verbringen weniger Zeit mit der Interpretation / Validierung normaler EP-Chromatogramme

-   Risikominimierung,

-   Qualitätssteigerung und

-   Know-How-Sicherung durch standartisierte Interpretation

-   Effizienzsteigerung und Know-How-Sicherung durch automatisierte Interpretation

-   Evtl Marketing von "AI in der Klinischen Chemie"

## Erfolgskriterien quantifizieren {.justify}

-   80% der normalen Protein-Elektrophoresen werden von einem Model automatisiert korrekt interpretiert
-   0% der pathologischen Protein-Elektrophoresen werden von einem Model als normal klassifiziert
-   Alle in diesem Prozess beteiligten Mitarbeitenden sind bis Ende 2025 geschult und wenden das Model an

## Bewertung der Situation {.justify}

**Operativer Prozess**

Heute werden die Chromatogramme der Protein-Elektrophoresen täglich von je einer Laborantin interpretiert und im Laborinformationssystem (LIS) dokumentiert. Anschliessend werden diese Interpretationen von einer Akademikerin im medizinischen Kontext kontrolliert, evtl korrigiert und dann der gesamte Befund für Versandt zum Kunden (Kliniker am Kantonsspital, niedergelassener Arzt) freigegeben.

Nur für die Interpretation der normalen Chromatogramme stehen standardisierte Textbausteine im LIS zur Vefügung. Für die Interpretation der als pathologisch eingestuften Chromatogramme stehen keine standartisierten Textbausteine zur Verfügung.

Die Durchführung dieses Prozesses ist nur eine von mehreren Tätigkeiten, welche die Mitarbeitenen täglich ausführen müssen. Es besteht ein erheblicher Zeitdruck.

**Human Ressources**

Momentan sind für diesen Prozess sechs Laborant:innen und fünf Akademiker:innen geschult. Alle 11 Personen stehen in verschiedenen Phasen ihrer professionellen Entwicklung, haben also unterschiedliche Erfahrungen. Ausserdem haben die Mitarbeitenden zum Teil unterschiedlich Bildungshintergründe (CTA, BMA, MPA, Biologen, Mediziner) aus z.T. unterschiedlichen internationalen Bildungssystemen.

Das Schulen und Trainieren neuer Mitarbeitenden ist aufwändig und benötigt viel Zeit. Diese Schulungen und Trainings können durch machine-learning- oder KI-Ansätze in Zukunft jedoch nicht ersetzt werden, da die Mitarbeitenden jederzeit in der Lage sein müssen, die Interpretationen selbständig auszuführen (Redundanz), zu überprüfen und zu korrigieren.

Diese heterogene Situation beim Wissens- und Erfahrungsstand des Mitarbeitenden führt wiederholt zu unterschiedlichen Interpretationen. Eine digitale Führung durch das LIS fehlt momentan vollständig. Damit entstehen zum Teil Unsicherheiten, Unklarheiten und schlussendlich Zeitverluste bei diesem Prozess. Eine konsistente Qualitätssicherung und Standardisierung im Sinne der Patienten kann momentan nicht zu 100% gewährleistet werden.

**Ressourcen:**

-   Fachwissen im Team der Klinischen Chemie sehr viel vorhanden, dass sich gut ergänzt (BMA, CTA, Mediziner, Biologen, Biotechnologen), sowohl labormedizinisch, als auch IT-technisch (R, SQL, Python, C##)

-   IT-Mitarbeiter Ressourcen sehr limitiert vorhanden (Fachkräftemangel)

-   Hard- und Software für Daten-Speicherung, - Aufbereitung und - Modellierung ausreichend vorhanden, wird betreut durch IT-Service-Desk.

-   Datenquellen: ca 4000 EP pro Jahr, digitale Rohdaten konsistent gespeichert seit 2018 auf lokalem Sebia-Server. Insgesamt sind ca 20'000 digital gespeicherte Chromatogramme vorhanden. 
Die Chromatogramm-Interpretationen sind zusammen mit den Patientendaten wie Geschlecht, Geburtsdatum, anderen Laborwerten konsistent seit 1995 im LIS vorhanden. Zugänglich via SQL.
Chromatogramm-Daten und Patienten-Daten sind über die eineindeutige Tagesnummer des jeweilgen Auftrags verknüpft.

**Anforderungen**  

-   80% der normalen Protein-Elektrophoresen werden von einem Model automatisiert korrekt interpretiert
-   0% der pathologischen Protein-Elektrophoresen werden von einem Model als normal klassifiziert
-   Nach verschiedenen Publikationen wird für ML-Projekte im diagnostischen Bereich die Ground-Truth mit einer anderen Messmethode definiert. Z. Bsp. ML-Modell für die Interpretation von EP-Chromatogrammen wird mit der Klassifizierung basierend auf Immunfixationen oder Immuno-Typing trainiert [@elfertExpertlevelDetectionMproteins2024].
-   Dokumentierte Übernahme des Modells in die Produktion entsprechend dem ISO 15198 akkreditierten Prozess

**Annahmen**  

- bisher keine relevanten

**Beschränkungen**  

-   Patientendaten dürfen das System nicht verlassen. D.h. keine Speicherung/Weitergabe an Clouds, Plattformen, AI-Modelle

**Risiken**  

-   Risiken 1: Textbaustein nur für normale = unaufällige EP-Chromatogramme vorhanden. Pathologische EP-Chromatogramme werden individuell interpretiert und dokumentiert. Hier sehe ich das Risiko, dass aus den vorhandenen Text/String-Daten keine eindeutigen Muster für pathologische Interpretationen modelliert werden können. *Massnahme:* ?? Clustering von String-Daten ?? Mustererkennung?? RandomForrest um aus string-Daten unauffällig vs pathologisch vorher zu sagen?? Würde es helfen, andere Labordaten (IgG, IEF, CBC) heranzuziehen??

-   Risiken 2: auf Seiten IT sehr wahrschweinlich zu wenige Ressourcen vorhanden um Model für automatiserte Interpreation ins LIS einzubauen. *Massnahme:* Falls ein sinnvoller machine-learning-Ansatz möglich sein wird, die Möglichkeiten mit Shiny / Python sondieren, um den Laborantinnen im Alltag einen sher benutzerfreundlichen Zugang zu ermöglichen.

## Bestimmung von Data-Mining Zielen {.justify}

-   Alle bisher aufgezeichneten Protein-Elektrophoese-Chromatogramme sind als x-y-Koordinaten gespeichert  
-   Weitere quantitative Merkmale der Chromatogramme, wie z Bsp Segmente, Peakhöhen (peakhight), Peakflächen (area under the curve), Peakpositionen, Steigungswerte (slope) und deren Änderung (erste und zweite Ableitung) werden neu berechnet und ebenfalls gespeichert  
-   Die dazughörigen Interpretationen sind als Texte im selben dataframe gespeichert
-   **Optional:** Die dazugehörigen Patientendaten sind im selben dataframe gespeichert  
-   **Optional:** Alle diese Daten, welche für die Entwicklung des Models verwendet werden sind der Einfachheit halber und zur Dokumentation in einer separaten SQLite- Datenbank gespeichert
-   verschiedene Datensets sind generiert:  
    -   Trainingsdatenset:60% der Daten  
    -   Validierungsdatenset: 20% der Daten   
    -   Datenset für Test der R-codes: 100 Datensätze vom Trainingsdatenset
    -   **Optional** weiteres Testdatenset: Daten, welche ab dem 16.06.2024 bis heute aufgezeichnet wurden
-   Für die Zielvariable sind 3 Kategorien festgelegt:  
    -   normal (unauffällig)  
    -   pathologisch (M-Protein) 
    -   unklar   
-   Als oberste Priorität ist ein Model mit random forrest entwickelt, welches die normalen Chromatogramme von den pathologischen Chromatogrammen unterscheiden kann
-   Das Model ist so entwickelt, dass es die normalen Chromatogramme mit einer Genauigkeit von min 80% klassifiziert werden
-   mit Principal Component Analysis (PCA) sind die wichtigsten Variablen bzw. Merkmale des gesamten Datensatzes identifiziert. Eine Reduktion der Dimensionen ist durchgeführt.   
-   Die Interaktionen & Colinearitäten zwischen den wichtigsten Prädiktoren sind untersucht und berücksichtigt
-   Mit diesen Prädiktoren ist ein logistisches Regressions-Model entwickelt, welches die normalen Chromatogramme von den pathologischen Chromatogrammen mit einer Genauigkeit von min 90% unterscheiden kann  

 

## Projektplan {.justify}

```{r project gantt, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
library(plan)
pplan <- new("gantt")
pplan <- ganttAddTask(pplan, "Business Understanding", "2024-10-06", "2024-10-19", done = 100)
pplan <- ganttAddTask(pplan, "Data Understanding", "2024-10-06", "2024-12-27", done = 100)

pplan <- ganttAddTask(pplan, "Data Preparation")
pplan <- ganttAddTask(pplan, "transpose hexa into dec", "2024-11-30", "2024-12-30", done = 100)
pplan <- ganttAddTask(pplan, "prepare new chrom.data (peak, area...)", "2024-11-29", "2024-12-30", done = 100)
pplan <- ganttAddTask(pplan, "prepare text-strings for classification", "2024-12-21", "2024-12-28", done = 100)
pplan <- ganttAddTask(pplan, "clustering of strings", "2024-12-27", "2024-12-28", done = 100)
pplan <- ganttAddTask(pplan, "prepare training and validation data sets", "2024-12-30", "2024-12-31", done = 100)
pplan <- ganttAddTask(pplan, "prep datasample for automation testing", "2024-12-29", "2024-12-30", done = 100)
pplan <- ganttAddTask(pplan, "Fill data into SQLite db", "2025-01-14", "2025-01-15", done = 0)


pplan <- ganttAddTask(pplan, "Modeling")
pplan <- ganttAddTask(pplan, "random forrest", "2024-12-31", "2025-01-03", done = 80)
#pplan <- ganttAddTask(pplan, "PCA", "2024-12-27", "2024-12-28", done = 0)
pplan <- ganttAddTask(pplan, "logistic Regression", "2025-01-06", "2025-01-12", done = 60)


pplan <- ganttAddTask(pplan, "Evaluation", "2025-01-03", "2025-01-12", done = 80)
pplan <- ganttAddTask(pplan, "Deployment", "2025-01-15", "2025-04-30", done = 10)
font <- ifelse(is.na(pplan[["start"]]), 2, 1)
```

```{r fig-gantt, echo=FALSE, eval=TRUE, message=FALSE, warning=FALSE}
#| label: fig-gantt
#| fig-cap: "Gantt-Chart des Projektplans"


plot(pplan, ylabel=list(font=font),
     event.time=c("2024-10-20", "2025-01-14"), event.label=c("ZHAW: Konzept Abgabe", "Leistungsnachweis"))
# par(lend="square") # default is round
legend("topright", pch=22, pt.cex=2, pt.bg=gray(c(0.3, 0.9)),
       border="black", 
       xpd=NA,
       legend=c("bearbeitet", "to be done"), 
       # title=" ", 
       bg="white")


```
